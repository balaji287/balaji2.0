import java.io.*;
import java.util.*;
import java.text.*;

public class ExpenseTracker {

    static class Expense {
        private String description;
        private double amount;
        private String category;
        private Date date;

        public Expense(String description, double amount, String category, Date date) {
            this.description = description;
            this.amount = amount;
            this.category = category;
            this.date = date;
        }

        public String getDescription() {
            return description;
        }

        public double getAmount() {
            return amount;
        }

        public String getCategory() {
            return category;
        }

        public Date getDate() {
            return date;
        }

        @Override
        public String toString() {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            return "Description: " + description + ", Amount: $" + amount + ", Category: " + category + ", Date: " + sdf.format(date);
        }
    }

    
    static class Tracker {
        private List<Expense> expenses;
        private Scanner scanner;

        public Tracker() {
            expenses = new ArrayList<>();
            scanner = new Scanner(System.in);
        }

        public void addExpense() {
            System.out.print("Enter description: ");
            String description = scanner.nextLine();

            System.out.print("Enter amount: ");
            double amount = scanner.nextDouble();
            scanner.nextLine();  // Consume newline

            System.out.print("Enter category: ");
            String category = scanner.nextLine();

            System.out.print("Enter date (MM/dd/yyyy): ");
            String dateInput = scanner.nextLine();
            Date date = null;
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                date = sdf.parse(dateInput);
            } catch (ParseException e) {
                System.out.println("Invalid date format, using current date.");
                date = new Date(); // Use current date if invalid date format
            }

            Expense expense = new Expense(description, amount, category, date);
            expenses.add(expense);
            System.out.println("Expense added successfully.");
        }

        public void viewAllExpenses() {
            if (expenses.isEmpty()) {
                System.out.println("No expenses recorded yet.");
                return;
            }

            System.out.println("\nAll Expenses:");
            for (Expense expense : expenses) {
                System.out.println(expense);
            }
        }

        public void viewCategoryExpenses() {
            System.out.print("Enter category to filter: ");
            String category = scanner.nextLine();

            boolean found = false;
            System.out.println("\nExpenses in category " + category + ":");
            for (Expense expense : expenses) {
                if (expense.getCategory().equalsIgnoreCase(category)) {
                    System.out.println(expense);
                    found = true;
                }
            }
            if (!found) {
                System.out.println("No expenses found in this category.");
            }
        }

        public void calculateTotalExpenses() {
            double total = 0;
            for (Expense expense : expenses) {
                total += expense.getAmount();
            }
            System.out.println("Total Expenses: $" + total);
        }

        public void saveExpensesToFile() {
            try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("expenses.dat"))) {
                out.writeObject(expenses);
                System.out.println("Expenses saved to file.");
            } catch (IOException e) {
                System.out.println("Error saving expenses: " + e.getMessage());
            }
        }

        public void loadExpensesFromFile() {
            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("expenses.dat"))) {
                expenses = (List<Expense>) in.readObject();
                System.out.println("Expenses loaded from file.");
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error loading expenses: " + e.getMessage());
            }
        }

        public void menu() {
            while (true) {
                System.out.println("\nExpense Tracker");
                System.out.println("1. Add Expense");
                System.out.println("2. View All Expenses");
                System.out.println("3. View Expenses by Category");
                System.out.println("4. Calculate Total Expenses");
                System.out.println("5. Save Expenses to File");
                System.out.println("6. Load Expenses from File");
                System.out.println("7. Exit");

                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine();  // Consume newline

                switch (choice) {
                    case 1:
                        addExpense();
                        break;
                    case 2:
                        viewAllExpenses();
                        break;
                    case 3:
                        viewCategoryExpenses();
                        break;
                    case 4:
                        calculateTotalExpenses();
                        break;
                    case 5:
                        saveExpensesToFile();
                        break;
                    case 6:
                        loadExpensesFromFile();
                        break;
                    case 7:
                        System.out.println("Exiting application...");
                        return;
                    default:
                        System.out.println("Invalid option, please try again.");
                }
            }
        }
    }

    public static void main(String[] args) {
        Tracker tracker = new Tracker();
        tracker.menu();
    }
}
